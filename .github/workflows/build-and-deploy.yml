# This is a basic workflow to help you get started with Actions

# this sets environment variables for use throughout the template
env: 
  AZURE_WEBAPP_NAME: aben-contoso-webapp #name of the webapp in azure
  AZURE_WEBAPP_PACKAGE_PATH: './publish' #where to find the binaries of the application
  NETCORE_VERSION: '3.1.103' #specify a specific version of .NET CORE to build your application

name: Build and Deploy

# what events will trigger the run of the workflow
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab. If this is not present it can only be run via triggers
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # this is a default behavior in ADO
      - uses: actions/checkout@v2

      # Makes sure that the specific version of the .NET SDK is installed 
      # instead of using the default provided on the GitHub Runner
      - name: Setup .NET Core SDK ${{env.NETCORE_VERSION}}
        uses: actions/setup-dotnet@v1 #how an action is specified
        with: #how to give params to an action
          dotnet-version: ${{env.NETCORE_VERSION}}
          
      # explicity define each step in the build process for a .net app
      - name: Restore
        run: dotnet restore
      
      # build optimized version of the .dll without the implied restore
      - name: Build
        run: dotnet build --no-restore -c Release
     
      # create the package to deploy
      # publish without the implied build, optimize for release, and specifically place the output in the /publish directory
      # this does not store the artifact, it is cleaned up by the runner unless explicitly uploaded to the job
      - name: Publish
        run: dotnet publish --no-build -c Release -o ./publish 
      
      # save the build artifact to the github actions run 
      - name: Publish Artifact
        uses: actions/upload-artifact@v1.0.0
        with: 
          name: artifact
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          
      # use semantic versioning to create a release
      - name: Release Notes Preview
        uses: synk/release-notes-preview@v1.6.1
        with: 
          releaseBranch: main
          
      # deploy the app to azure webservices
      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{env.AZURE_WEBAPP_NAME}} #name of the app 
          publish-profile: ${{secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} #authentication for accessing azure webapps 
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} #where to find the artifact to deploy
          
        
        
